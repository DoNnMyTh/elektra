FROM localhost/alpine:3.3
ADD docker/monsoon.rsa.pub /etc/apk/keys/monsoon.rsa.pub
RUN echo "https://localhost" >> /etc/apk/repositories
RUN { \
		echo 'install: --no-document'; \
		echo 'update: --no-document'; \
	  } >> /etc/gemrc

RUN apk --no-cache add git curl tzdata nodejs postgresql-client \
                   # ruby base
                   ruby ruby-json ruby-bigdecimal ruby-irb ruby-io-console \
                   # gems with native extensions
                   ruby-byebug \
                   ruby-ffi \
                   ruby-nokogiri>=1.6.8 \
                   ruby-pg \
                   ruby-puma \
                   ruby-redcarpet \
                   ruby-unf \
                   ruby-websocket-driver

RUN curl -L -o /usr/bin/dumb-init https://github.com/Yelp/dumb-init/releases/download/v1.0.1/dumb-init_1.0.1_amd64 && \
    chmod +x /usr/bin/dumb-init && \
    dumb-init -V

RUN curl -f -L https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2 | tar jxv phantomjs-2.1.1-linux-x86_64/bin/phantomjs && \
    mv phantomjs-2.1.1-linux-x86_64/bin/phantomjs /usr/bin && rm -rf phantomjs* &&\
    mkdir /tmp/phantomized && cd /tmp/phantomized && \
    curl -L https://github.com/dustinblackman/phantomized/releases/download/2.1.1/dockerized-phantomjs.tar.gz  | tar zx && \
    mv usr/lib/x86_64-linux-gnu /usr/lib/ && \
    mv lib/x86_64-linux-gnu /lib/ && \
    mv etc/fonts /etc/ && \
    mkdir -p /lib64 && mv lib64/* /lib64/ && \
    rm -rf /tmp/phantomized && \
    phantomjs -v
    
WORKDIR /home/app/webapp

RUN gem install bundler -v 1.11.2

ADD Gemfile Gemfile.lock ./
# copy all gemspec files from plugins folder into tmp/plugins/
ADD plugins/*/*.gemspec tmp/plugins/
# copy organize_plugins_gemspecs script (see comments in script/organize_plugins_gemspecs)
ADD script/organize_plugins_gemspecs script/
# execute organize_plugins_gemspecs
RUN script/organize_plugins_gemspecs

RUN bundle install --without development

ADD . /home/app/webapp/
RUN RAILS_ENV=production bin/rake assets:precompile && rm -rf tmp/cache/assets

ENTRYPOINT ["dumb-init", "-c", "--", "docker/env.sh"]
CMD ["docker/puma.sh"]
