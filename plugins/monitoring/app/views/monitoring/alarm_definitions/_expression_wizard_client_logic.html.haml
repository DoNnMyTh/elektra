:javascript
  // global dimension counter
  var dimension_cnt = 0;
  // we used here a global value because it is used by render_dimension_row that and
  // dimension_data is only generated once
  var dimension_data;

  //
  // INIT
  //
  $(function(){
    
    var period =  $('#period_slider').data('period') || 60;
    $('#period_slider').slider({
      step: 60,
      min: 60,
      max: 600,
      value: period,
      formatter: function(value) {
        return value+' sec';
      }
    }).on(
      "slide", function(slide_event) { 
         //console.log(slide_event.value);
         generate_expression();
         $('#period_custom').val(slide_event.value);
         // send change to trigger statistic reload after 1 second
         $('#period_custom').trigger("change");
      }
    );

    if( metric_names && wizard_mode == "create" ) {
      $("select.dimension-name").selectpicker({
        style: 'btn-default',
        size: 7
      });
  
      $('#metric').selectpicker({
        style: 'btn-default',
        size: 10
      });
    }

    // events
    // delay change event for 1 second
    $('#period_custom, #threshold_value').change(monitoring.throttle(function(){
      generate_expression();
      show_statistic();
    },1000));
    
    $('#statistical_function').change(function(){
      generate_expression();
      show_statistic();
    });

    $('#threshold_relational_operator').change(function(){
      generate_expression();
    });
    
    if (wizard_mode == "edit") {
      generate_expression();
      show_statistic();
    }
    else if (wizard_mode == "create") {
      // initial autofocus
      setTimeout(function() {
        $("#metric").focus().select();
        please_define_me();
      }, 0);
    }
  });

  //
  // LOGIC
  //
  
  // shown on startup
  function please_define_me() {
    $('#preview').addClass('expression-preview text-info pull-left');
    $('#preview').text('please define me');
  }
  
  // renders new dimensionrow
  function render_dimension_row(ID) {
    // if no dimension was found do nothing
    if (dimension_data) {
      var dimension_keys = Object.keys(dimension_data);

      $.post( "#{plugin('monitoring').dimension_row_alarm_definitions_path()}", {
        cnt: ID, 
        keys: JSON.stringify(dimension_keys), 
        // in case of invalid token we don't want to follow the redirect from the server to the logon page
        // instead we handle that case in check_logon_state()
        do_not_redirect: true
      }, 
        function( data, status, xhr){ 
        
          check_logon_state(xhr);
          // render row data
          $('#expression_dimensions').append(data);

          // show head on the first run
          $(".expression-dimension-head").fadeIn();
          // show new dimension line
          $("#expression_dimension_"+ID).fadeIn();

          // enable remove button
          var id_before = ID - 1;
          if($('#expression_remove_dimension_btn_'+id_before)) {
            $('#expression_remove_dimension_btn_'+id_before).removeClass('disabled');
          }
          
          // remove all dimensions keys that are used and
          // write the keys for later in creation form  and match by 
          var dimension_keys = Object.keys(dimension_data);
          $('.dimension_key').each(function(){
            var used_dimension_key = $(this).val();
            var index = dimension_keys.indexOf(used_dimension_key)
            dimension_keys.splice(index,1);
          })
          $('#filter_by_dimensions').val(dimension_keys);
          
          // update preview
          generate_expression();
      }).error (function(xhr) {
        show_error(xhr);
      });
    }
  }
  
  // set autocompletion for dimension values field
  function autocomplete_dimension_values(ID) {

    $("#dimension_key_"+ID).prop('disabled',true);
    $("#dimension_value_"+ID).prop('disabled',false);
    $('.selectpicker').selectpicker('refresh');
    if($("#dimension_key_"+ID).val() != '') {
      // get typeahead data
      var selected_dimension_key = $("#dimension_key_"+ID).val();
      var dimension_values = dimension_data[selected_dimension_key];

      $("#dimension_value_"+ID).empty();
      var options = "";
      $.each(dimension_values, function(index,value){
        options += "<option value='"+value+"'>"+value+"</option>"
      });

      $("#dimension_value_"+ID).html(options);
      $('#dimension_value_'+ID).selectpicker('refresh');
      $('#dimension_value_'+ID).on('changed.bs.select', function (e) {
        // to prevent random user input only the input from typeahead is valid
        $("#dimension_value_"+ID).data('valid',true);
        $("#dimension_value_"+ID).prop('disabled',true);
        $('#dimension_value_'+ID).selectpicker('refresh');
        // remove selected value from array
        var selected_dimension_value = $("#dimension_value_"+ID).val();
        var value_index =  dimension_data[selected_dimension_key].indexOf(selected_dimension_value);
        dimension_data[selected_dimension_key].splice(value_index,1);
        // remove key if no values left
        if ( dimension_data[selected_dimension_key].length == 0 ) {
          delete dimension_data[selected_dimension_key];
        }
        // render new row
        dimension_cnt++
        render_dimension_row(dimension_cnt); 
        generate_expression();
        show_statistic();
      });

      // set fokus to value field
      //$("#dimension_value_"+ID).prop('readonly',false);
      $("#dimension_value_"+ID).focus();
    }
  }

  // load the logon page if we got a new location
  // that happens when the token was invalid
  function check_logon_state(XHR) {
    if(XHR.getResponseHeader('Location')) {
      // close modal window
      $('#modal-holder').find('.modal').modal('hide');
      // load logon page
      window.location = "#{ monsoon_openstack_auth.login_path(domain_name:@scoped_domain_name, after_login:@after_login) }";
    }
  }
  
  function show_error(XHR) {
    $('.create-expression-error').css('display','block');
    $('.create-expression-error').html('Metric Dimensions Error: '+XHR.status+' '+XHR.statusText);
  }

  // if everything was reseted to start
  function cleanup_dimensions() {
    dimension_cnt = 1;
    $('#expression_dimensions').empty();
  }

  // is triggerd if user chooses a metric
  function get_dimensions_for_metric(METRICS_LIST_TITLE) {
    var metric_name = $('#metric').val();
    if (metric_name) {
    
      // remove prefilter
      $.post("#{plugin('monitoring').dimensions_for_metric_alarm_definitions_path()}", { 
        name: metric_name,
        // in case of invalid token we don't want to follow the redirect from the server to the logon page
        // instead we handle that case in check_logon_state()
        do_not_redirect: true 
      },
        function( data,status,xhr ) {
  
          check_logon_state(xhr);
          // check that we have correct data here
          if (typeof(data) != 'object') {
            $('.create-expression-error').css('display','block');
            $('.create-expression-error').html('Metric Dimensions Error: was not able to load the dimensions...');
            return;
          }
          
          // only used if we load it first time
          if( !RegExp(/Metric/).test($('#metric_list div.form-group label.control-label').text()) ) {
            $('#prefilter').fadeOut();
            // reuse metric list
            $('#metric_list').insertBefore($('.expression-dimension-head'))
            // rename label
            $('#metric_list div.form-group label.control-label').text(METRICS_LIST_TITLE)
            $('#prefilter').remove();
            $('.hide-on-start').fadeIn();
          }

          dimension_data = data; 
          if (Object.keys(dimension_data).length > 0) {
            // normalize data
            $(Object.keys(dimension_data)).each(function(index,dimension_key) {
              //console.log(dimension_key);
              var unique_values = [];
              // removed doubled entrys
              // http://stackoverflow.com/questions/9229645/remove-duplicates-from-javascript-array
              $.each(dimension_data[dimension_key], function(i, value){
                  if($.inArray(value, unique_values) === -1) unique_values.push(value);
              });
              dimension_data[dimension_key] = unique_values;
            });
            
            generate_expression();
            var dimension_keys = Object.keys(dimension_data);
            // remove all used dimensions from dimension_keys
            $('.dimension_key').each(function(){
              var dimension = $(this).val();
              dimension_keys.splice(dimension_keys.indexOf(dimension), 1);
            })
            // write dimension keys for later use in match by
            $('#filter_by_dimensions').val(dimension_keys.toString())
            cleanup_dimensions();
            // render the row based on dimension_data and the template
            render_dimension_row(dimension_cnt);
          }
          else {
            generate_expression();
            $('.hide-on-start').fadeIn();
          }
          show_statistic();
  
        }).error( function(xhr) {
          show_error(xhr);
        });
      }
  }
  
  // render the statistic
  function show_statistic() {

    if (!$('#preview').data('valid')) { return };

    // cleanup left overs
    // http://stackoverflow.com/questions/22452112/nvd3-clear-svg-before-loading-new-chart
    // http://stackoverflow.com/questions/28560835/issue-with-useinteractiveguideline-in-nvd3-js
    // https://github.com/Caged/d3-tip/issues/133
    d3.selectAll("svg > *").remove();
    d3.select("#statistic")
      .on("mousemove", null)
      .on("mouseout", null)
      .on("dblclick", null)
      .on("click", null);
    d3.select(".nvtooltip").remove();
    
    if (wizard_mode == "create") {
      $('#statistic').html('<text class="nvd3 nv-noData" dy="-.7em" style="text-anchor: middle;" x="217" y="200"}>Loading Data.</text>');
    }
    else if (wizard_mode == "edit") {
      $('#statistic').html('<text class="nvd3 nv-noData" dy="-.7em" style="text-anchor: middle;" x="217" y="112.5"}>Loading Data.</text>');
    }

    $.post( "#{plugin('monitoring').statistics_alarm_definitions_path()}", {
      metric: $('#metric').val(),
      dimensions: expression_dimensions(),
      period: $('#period_custom').val(),
      threshold: $('#threshold_value').val(),
      statistical_function: $('#statistical_function').val(),
      // in case of invalid token we don't want to follow the redirect from the server to the logon page
      // instead we handle that case in check_logon_state()
      do_not_redirect: true
    },function(data,status,xhr) {
      check_logon_state(xhr);
      monitoring.render_statistic('statistic',data);
      $('#reload_statistic_btn').removeClass('disabled');
    }).error (function(xhr) {
      $('#statistic').empty();
    });
  }

  // is triggerd if the user changes a value
  function generate_expression() {
    
    var valid = true;
    $('.create-expression-error').css('display','none');

    // metrics
    var metric = $('#metric').val();
    if(metric == "")valid = false;
    
    // dimensions
    var dimensions = expression_dimensions();

    if (dimensions != "") {
      dimensions = "{"+dimensions+"}";
    }
  
    // statistical function
    var statistical_function = $('#statistical_function').val();
    
    // period
    var period = $('#period_custom').val();
    if(period == "") {
      valid = false;
    }
    
    // validation
    period = Math.floor(period);
    var numberReg =  /^[0-9]+$/;
    if (!numberReg.test(period/60)) {
      // if the error is already set we do not need to set it again
      if (!$('.period .has-error').length) {
        $('.period.help-block').fadeOut();
        $('.period').addClass('has-error');
        $('.period').append("<span class='help-block period-error'>Period is not a multiple of 60 or an integer</span>");
      }
      period = '-'
      valid = false;
    }
    else {
      $('.period-error').remove();
      $('.period').removeClass('has-error');
      $('.period.help-block').show();
    }

    // relational operator
    var relational_operator = $('#threshold_relational_operator').val();
    if(relational_operator == "") valid = false;
    var threshold_value = $('#threshold_value').val();
    if(!$.isNumeric(threshold_value)) {
      // if the error is already set we do not need to set it again
      if(!$('.threshold .has-error').length){
        $('.threshold.help-block').hide();
        $('.threshold').addClass('has-error');
        $('.threshold').append("<span class='help-block threshold-error'>Threshold must be a number</span>");
      }
      threshold_value = '-';
      valid = false;
    }
    else {
      $('.threshold-error').remove();
      $('.threshold').removeClass('has-error');
      $('.threshold.help-block').show();
    }

    // colorize expression
    $('#preview').removeClass();
    if(valid) {
      $('#preview').addClass('expression-preview text-success pull-left');
      $('#alarm_definition_ready_btn').fadeIn();
      $('#preview').data('valid', true);
    }
    else {
      $('#alarm_definition_ready_btn').fadeOut();
      $('#preview').addClass('expression-preview text-danger pull-left');
      $('#preview').data('valid', false);
    }
  
    // render current expression
    var expression = statistical_function+" ("+metric+dimensions+", "+period+") "+relational_operator+" "+threshold_value;
    $('#preview').text(expression);
  
    // write it to form for submit
    $('#expression').val(expression);
  } 
  
  // triggered when the user removes a dimension row
  function remove_dimension_row(ID) {
    // add value to choosen dimension key
    var dimension_key = $("#dimension_key_"+ID).val();
    var dimension_value = $("#dimension_value_"+ID).val();

    // check for exiting key
    if(!dimension_data.hasOwnProperty(dimension_key)) {
      // create key and empty array
      dimension_data[dimension_key] = [];
    }
  
    // add free value to array
    dimension_data[dimension_key].push(dimension_value);
    // remove entry
    $('#expression_dimension_'+ID).remove();
    // remove latest empty dimension key - value input and render new to update typeahead
    $('#expression_dimension_'+dimension_cnt).remove();
    // generate expression and render new dimension row
    generate_expression();
    render_dimension_row(dimension_cnt);
    show_statistic();
  };

  // everything starts from begining
  function cleanup() {
    cleanup_dimensions();
    please_define_me();
    $('#alarm_definition_ready_btn').fadeOut();
    $('.hide-on-start').fadeOut();
  }

  // used for prefilter to load all values related to on dimension
  function get_dimension_values() {

    var dimension = $('select.dimension-name').val();
    if (dimension != "") {

      $('#start_with_dimension_value').fadeOut();
      $('#start_with_metric').fadeOut();
      $('.dimension-or-metrics').fadeOut();
      console.log('dasdas');
      
      $.post( "#{plugin('monitoring').dimension_values_alarm_definitions_path()}", {
        name: dimension,
        // in case of invalid token we don't want to follow the redirect from the server to the logon page
        // instead we handle that case in check_logon_state()
        do_not_redirect: true
      },function(data,status,xhr) {
        check_logon_state(xhr);

        // readjust the prefilter line
        $('.dimension-or-metrics').parent().remove();
        $('#filter_dimensions').addClass('col-md-7');
        $('#filter_dimensions').removeClass('col-md-5');
        $('#filtered_metrics').addClass('col-md-4');
        $('#filtered_metrics').removeClass('col-md-5');

        var start_with_dimension = $('#start_with_dimension_row');
        start_with_dimension.removeClass('col-md-12');
        start_with_dimension.addClass('col-md-6');
        $('#start_with_dimension_value').html(data);
        $('select.dimension-value').selectpicker({
          style: 'btn-default',
          size: 7
        });
        $('#start_with_dimension_value').fadeIn();
      }).error (function(xhr){});
    }

  };
  
  // used on prefilter to filter metrics list
  function filter_metrics_by_dimension() {

    var dimension = $('select.dimension-name').val();
    var value = $('select.dimension-value').val();
    
    if (dimension != "" && value != "") {
      cleanup();
      $.post( "#{plugin('monitoring').metric_names_by_dimension_alarm_definitions_path()}", {
        name: dimension,
        value: value,
        // in case of invalid token we don't want to follow the redirect from the server to the logon page
        // instead we handle that case in check_logon_state()
        do_not_redirect: true
      },function(data,status,xhr) {
        check_logon_state(xhr);
        $('#start_with_metric').html(data);
        $('#metric').selectpicker({
          style: 'btn-default',
          size: 10
        });
        $('#start_with_metric').fadeIn();
      }).error (function(xhr) {});
    }

  };
  
  // get all expression dimensions as string
  function expression_dimensions() {
    // dimensions
    var dimensions = "";
    if (wizard_mode == "edit") {
      dimensions = $('#dimensions').val();
    }
    else if (wizard_mode == "create") {
      $('.dimension_key').each(function( ) {
        if($( this ).text() != '' ) {
          var defintion_id = $(this).data('id')
          var key = $( this ).val();
          
          var valid_value = $('#dimension_value_'+defintion_id).data('valid');
          if(valid_value) {
            var value = $('#dimension_value_'+defintion_id).val();
            if(key != '' && value != '') {
              dimensions += key+"="+value+",";
            }   
          }
        }
      });
      // remove the last comma
      dimensions = dimensions.slice(0, -1);
    }
    return dimensions;
  }