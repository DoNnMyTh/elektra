:javascript
  // global dimension counter
  var dimension_cnt = 0;
  // we used here a global value because it is used by render_dimension_row that and
  // dimension_data is only generated once
  var dimension_data;

  //
  // INIT
  //
  $(function(){
    
    var period =  $('#period_slider').data('period') || 60;
    $('#period_slider').slider({
      step: 60,
      min: 60,
      max: 600,
      value: period,
      formatter: function(value) {
        return value+' sec';
      }
    }).on(
      "slide", function(slide_event) { 
         //console.log(slide_event.value);
         generate_expression();
         $('#period_custom').val(slide_event.value);
         // send change to trigger statistic reload after 1 second
         $('#period_custom').trigger("change");
      }
    );
    // set typeahead for metrics
    if( metric_names && wizard_mode == "create" ) {
      $("#metric").typeahead({source:  metric_names, afterSelect: 
        function(){ 
          var metric_name = $('#metric').val();
          // this is called once to get the dimension data
          get_dimensions(metric_name);
        }
      });
    }
    
    // events
    // delay change event for 1 second
    $('#period_custom, #threshold_value').change(monitoring.throttle(function(){
      generate_expression();
      show_statistic();
    },1000));
    
    $('#statistical_function').change(function(){
      generate_expression();
      show_statistic();
    });

    $('#threshold_relational_operator').change(function(){
      generate_expression();
    });
    
    if (wizard_mode == "edit") {
      generate_expression();
      show_statistic();
    }
    else if (wizard_mode == "create") {
      // initial autofocus
      setTimeout(function() {
        $("#metric").focus().select();
        $('#preview').addClass('expression-preview text-info pull-left');
        $('#preview').text('please define me');
      }, 0);
    }
  });

  //
  // LOGIC
  //
  function render_dimension_row(ID) {
    // if no dimension was found do nothing
    if (dimension_data) {
      var dimension_keys = Object.keys(dimension_data);

      $.post( "#{plugin('monitoring').dimension_row_alarm_definitions_path()}", {
        cnt: ID, 
        keys: JSON.stringify(dimension_keys), 
        // in case of invalid token we don't want to follow the redirect from the server to the logon page
        // instead we handle that case in check_logon_state()
        do_not_redirect: true
      }, 
        function( data, status, xhr){ 
        
          check_logon_state(xhr);
          // render row data
          $('#expression_dimensions').append(data);

          // set fokus to key field
          $("#dimension_key_"+ID).focus();
          $("#dimension_value_"+ID).prop('readonly',true);
          // show the complete wizard on first run
          $('.hide-on-start').fadeIn();

          // enable remove button
          var id_before = ID - 1;
          if($('#expression_remove_dimension_btn_'+id_before)) {
            $('#expression_remove_dimension_btn_'+id_before).removeClass('disabled');
          }
          
          // remove all dimensions keys that are used and
          // write the keys for later in creation form  and match by 
          var dimension_keys = Object.keys(dimension_data);
          $('.dimension_key').each(function(){
            var used_dimension_key = $(this).val();
            var index = dimension_keys.indexOf(used_dimension_key)
            dimension_keys.splice(index,1);
          })
          $('#filter_by_dimensions').val(dimension_keys);
          
          // update preview
          generate_expression();
      }).error (function(xhr) {
        show_error(xhr);
      });
    }
  }
  
  function autocomplete_dimension_values(ID) {
    // destroy old typeahead
    $("#dimension_value_"+ID).typeahead('destroy');
    if($("#dimension_key_"+ID).val() != '') {
      // get typeahead data
      var selected_dimension_key = $("#dimension_key_"+ID).val();
      var dimension_values = dimension_data[selected_dimension_key];
      // set typeahead for values
      $("#dimension_value_"+ID).typeahead({ source: dimension_values, afterSelect: 
        function(){
          // to prevent random user input only the input from typeahead is valid
          $("#dimension_value_"+ID).data('valid',true);
          // remove selected value from array
          var selected_dimension_value = $("#dimension_value_"+ID).val();
          var value_index =  dimension_data[selected_dimension_key].indexOf(selected_dimension_value);
          dimension_data[selected_dimension_key].splice(value_index,1);
          // remove key if no values left
          if ( dimension_data[selected_dimension_key].length == 0 ) {
            delete dimension_data[selected_dimension_key];
          }
          // render new row
          dimension_cnt++
          render_dimension_row(dimension_cnt); 
          generate_expression();
          // made row read only
          $("#dimension_value_"+ID).prop("readonly", true);
          $("#dimension_key_"+ID).prop("disabled", "disabled");
          show_statistic();
        }
      });
  
      // set fokus to value field
      $("#dimension_value_"+ID).prop('readonly',false);
      $("#dimension_value_"+ID).focus();
    }
    else {
      // empty key
      $("#dimension_value_"+ID).prop('readonly',true);
    }
  }

  // load the logon page if we got a new location
  // that happens when the token was invalid
  function check_logon_state(XHR) {
    if(XHR.getResponseHeader('Location')) {
      // close modal window
      $('#modal-holder').find('.modal').modal('hide');
      // load logon page
      window.location = "#{ monsoon_openstack_auth.login_path(domain_name:@scoped_domain_name, after_login:@after_login) }";
    }
  }
  
  function show_error(XHR) {
    $('.create-expression-error').css('display','block');
    $('.create-expression-error').html('Metric Dimensions Error: '+XHR.status+' '+XHR.statusText);
  }

  function get_dimensions(METRIC_NAME) {
    $.post("#{plugin('monitoring').dimensions_for_metric_alarm_definitions_path()}", { 
      name: METRIC_NAME,
      // in case of invalid token we don't want to follow the redirect from the server to the logon page
      // instead we handle that case in check_logon_state()
      do_not_redirect: true 
    },
      function( data,status,xhr ) { 

        check_logon_state(xhr);

        dimension_data = data; 
        // normalize data
        $(Object.keys(dimension_data)).each(function(index,dimension_key) {
          //console.log(dimension_key);
          var unique_values = [];
          // removed doubled entrys
          // http://stackoverflow.com/questions/9229645/remove-duplicates-from-javascript-array
          $.each(dimension_data[dimension_key], function(i, value){
              if($.inArray(value, unique_values) === -1) unique_values.push(value);
          });
          dimension_data[dimension_key] = unique_values;
        });
        
        generate_expression();
        var dimension_keys = Object.keys(dimension_data);
        // remove all used dimensions from dimension_keys
        $('.dimension_key').each(function(){
          var dimension = $(this).val();
          dimension_keys.splice(dimension_keys.indexOf(dimension), 1);
        })
        // write dimension keys for later use in match by
        $('#filter_by_dimensions').val(dimension_keys.toString())

        // cleanup everything
        dimension_cnt = 1;
        $('#expression_dimensions').empty();
        $('.expression_dimension_head').fadeIn();
        // render the row based on dimension_data and the template
        render_dimension_row(dimension_cnt);
        show_statistic();

      }).error( function(xhr) {
        show_error(xhr);
      });
  }
  
  function show_statistic() {

    if (!$('#preview').data('valid')) { return };

    // cleanup left overs
    // http://stackoverflow.com/questions/22452112/nvd3-clear-svg-before-loading-new-chart
    // http://stackoverflow.com/questions/28560835/issue-with-useinteractiveguideline-in-nvd3-js
    // https://github.com/Caged/d3-tip/issues/133
    d3.selectAll("svg > *").remove();
    d3.select("#statistic")
      .on("mousemove", null)
      .on("mouseout", null)
      .on("dblclick", null)
      .on("click", null);
    d3.select(".nvtooltip").remove();
    
    if (wizard_mode == "create") {
      $('#statistic').html('<text class="nvd3 nv-noData" dy="-.7em" style="text-anchor: middle;" x="217" y="200"}>Loading Data.</text>');
    }
    else if (wizard_mode == "edit") {
      $('#statistic').html('<text class="nvd3 nv-noData" dy="-.7em" style="text-anchor: middle;" x="217" y="112.5"}>Loading Data.</text>');
    }

    $.post( "#{plugin('monitoring').statistics_alarm_definitions_path()}", {
      metric: $('#metric').val(),
      dimensions: expression_dimensions(),
      period: $('#period_custom').val(),
      threshold: $('#threshold_value').val(),
      statistical_function: $('#statistical_function').val(),
      // in case of invalid token we don't want to follow the redirect from the server to the logon page
      // instead we handle that case in check_logon_state()
      do_not_redirect: true
    },function(data,status,xhr) {
      
      check_logon_state(xhr);
      $('#statistic').empty();
      nv.addGraph(function() {
        var chart = nv.models.lineChart();
        
        chart.margin({"left":30,"right":30,"top":5,"bottom":30});
        chart.useInteractiveGuideline(true);
        chart.xAxis.tickFormat(function(d) { return d + ' min' });
      
        d3.select('#statistic')
          .datum(data)
          .transition().duration(500)
          .call(chart)
          ;
      
        nv.utils.windowResize(chart.update);
        return chart;
      });
      
      $('#reload_statistic_btn').removeClass('disabled');
    }).error (function(xhr) {
        show_error(xhr);
    });
  }

  function generate_expression() {
    
    var valid = true;
    $('.create-expression-error').css('display','none');

    // metrics
    var metric = $('#metric').val();
    if(metric == "")valid = false;
    
    // dimensions
    var dimensions = expression_dimensions();

    if (dimensions != "") {
      dimensions = "{"+dimensions+"}";
    }
  
    // statistical function
    var statistical_function = $('#statistical_function').val();
    
    // period
    var period = $('#period_custom').val();
    if(period == "") valid = false;
    // validation
    period = Math.floor(period);
    var numberReg =  /^[0-9]+$/;
    if (!numberReg.test(period/60)) {
      // if the error is already set we do not need to set it again
      if (!$('.period .has-error').length) {
        $('.period.help-block').hide();
        $('.period').addClass('has-error');
        $('.period').append("<span class='help-block period-error'>Period is not a multiple of 60 or an integer</span>");
      }
      period = '-'
      valid = false;
    }
    else {
      $('.period-error').remove();
      $('.period').removeClass('has-error');
      $('.period.help-block').show();
    }

    // relational operator
    var relational_operator = $('#threshold_relational_operator').val();
    if(relational_operator == "") valid = false;
    var threshold_value = $('#threshold_value').val();
    if(!$.isNumeric(threshold_value)) {
      // if the error is already set we do not need to set it again
      if(!$('.threshold .has-error').length){
        $('.threshold.help-block').hide();
        $('.threshold').addClass('has-error');
        $('.threshold').append("<span class='help-block threshold-error'>Threshold must be a number</span>");
      }
      threshold_value = '-';
      valid = false;
    }
    else {
      $('.threshold-error').remove();
      $('.threshold').removeClass('has-error');
      $('.threshold.help-block').show();
    }
  
    //  chain expressions keep it vor later
    //  var chain_operator = $('#chain_operator').val();
    //  if(chain_operator != '' && valid) {
    //    $('#chain_expression_btn').removeClass('hide');
    //    $('#create_alarm_definition_btn').addClass('hide');
    //  }
    //  else {
    //    $('#chain_expression_btn').addClass('hide');
    //    $('#create_alarm_definition_btn').removeClass('hide');
    //  }

    // colorize expression
    $('#preview').removeClass();
    if(valid) {
      $('#preview').addClass('expression-preview text-success pull-left');
      $('#alarm_definition_ready_btn').removeClass('hide');
      $('#preview').data('valid', true);
    }
    else {
      $('#alarm_definition_ready_btn').addClass('hide');
      $('#preview').addClass('expression-preview text-danger pull-left');
      $('#preview').data('valid', false);
    }
  
    // render current expression
    var expression = statistical_function+" ("+metric+dimensions+", "+period+") "+relational_operator+" "+threshold_value//+" "+chain_operator;
    $('#preview').text(expression);
  
    //  chain expressions keep it vor later
    //  // collect all chained expressions
        var sub_expression = "";
    //  $('.sub-expression').each(function(){
    //    sub_expression += " "+$(this).text().trim();
    //  });
  
    // write it to form for submit
    $('#expression').val($.trim(sub_expression+" "+expression));
  //  $('#ready_expressions').val($.trim(sub_expression+" "+expression));
  
  } 
  
  function remove_dimension_row(ID) {
    // add value to choosen dimension key
    var dimension_key = $("#dimension_key_"+ID).val();
    var dimension_value = $("#dimension_value_"+ID).val();

    // check for exiting key
    if(!dimension_data.hasOwnProperty(dimension_key)) {
      // create key and empty array
      dimension_data[dimension_key] = [];
    }
  
    // add free value to array
    dimension_data[dimension_key].push(dimension_value);
    // remove entry
    $('#expression_dimension_'+ID).remove();
    // remove latest empty dimension key - value input and render new to update typeahead
    $('#expression_dimension_'+dimension_cnt).remove();
    // generate expression and render new dimension row
    generate_expression();
    render_dimension_row(dimension_cnt);
    show_statistic();
  };


  function get_metric_names() {
    
  	var metric_names_unfiltered = []
    $.each(metrics_data, function( index, metric ) {
      metric_names_unfiltered.push(metric[0]);
    });
    //console.log(metric_names_unfiltered);
    
    var metric_names_unique = metric_names_unfiltered.filter(function(metric_name, i, ar){ 
      return ar.indexOf(metric_name) === i; 
    });
    //console.log(metric_names_unique);
    
    return metric_names_unique;
  };
  
  function expression_dimensions() {
    // dimensions
    var dimensions = "";
    if (wizard_mode == "edit") {
      dimensions = $('#dimensions').val();
    }
    else if (wizard_mode == "create") {
      $('.dimension_key').each(function( ) {
        if($( this ).text() != '' ) {
          var defintion_id = $(this).data('id')
          var key = $( this ).val();
          
          var valid_value = $('#dimension_value_'+defintion_id).data('valid');
          if(valid_value) {
            var value = $('#dimension_value_'+defintion_id).val();
            if(key != '' && value != '') {
              dimensions += key+"="+value+",";
            }   
          }
        }
      });
      // remove the last comma
      dimensions = dimensions.slice(0, -1);
    }
    return dimensions;
  }