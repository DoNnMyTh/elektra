#backend_error
= f.input :name, 
  input_html: { autofocus: true }
= f.input :description

-# https://github.com/sapcc/monasca-api/blob/master/docs/monasca-api-spec.md#changing-alarm-definitions
- if edit
  - hint = "Metrics in the expression cannot be changed This is because the metric is used to create Alarms and Alarms may already have been created. #{link_to 'Edit with Wizard', plugin('monitoring').edit_expression_alarm_definitions_path(expression: @expression, alarm_definition_id: @alarm_definition.id), class: 'btn btn-primary btn-xs pull-right wizard-btn', data: { modal_transition:true }}"
  - unless @parsed_expression_success
    - hint = "Metrics in the expression cannot be changed This is because the metric is used to create Alarms and Alarms may already have been created. <b>The wizard is disabled because it was not possible to parse the expression.</b> #{link_to 'Edit with Wizard', '#', class: 'btn btn-default btn-xs pull-right wizard-btn', disabled:true}"
  = f.input :expression, 
    icon_hint: hint
- else
  = f.input :expression, 
    icon_hint: "If the expression is true, and the alarm actions are enabled and configured a notification will be sent. Refer to the #{link_to 'documentation', 'https://github.com/sapcc/monasca-api/blob/master/docs/monasca-api-spec.md#alarm-definition-expressions', target: '_blank'} for how to write an expression. To create a valid expression you can also use the expression wizard. #{link_to 'Use Wizard', 'javascript:;', id: 'use_wizard_btm', class: 'btn btn-primary btn-xs pull-right wizard-btn'}"

- severity = @alarm_definition.severity || 'LOW'
= f.input :severity, 
    collection: @alarm_definition.supported_severities, 
    selected: severity

- if edit
  = f.input :match_by, readonly: true,
      label: 'Filter by',
      icon_hint: 'Cannot be changed because this field is used to create Alarms and Alarms may already have been created. The only option to change "filter by" is to delete the existing Alarm Definition and create a new one.'
- else
  = f.input :match_by,
      label: 'Seperate by',
      icon_hint: 'Comma-separated list of dimensions, A separate alarm will be created for every distinct dimension value.'

.row
  .col-md-8.col-md-offset-3
    = f.input :actions_enabled, as: :boolean, label: 'Send status notifications for:'
#alarm_actions
  = f.input :ok_actions, 
      label: 'OK',collection: @notification_methods.map{|s| [s.name, s.id]}, 
      input_html: { multiple: true, size: 3 }, 
      include_hidden: false 
  = f.input :alarm_actions, 
      label: 'Alarm',
      collection: @notification_methods.map{|s| [s.name, s.id]}, 
      input_html: { multiple: true, size: 3 }, 
      include_hidden: false 
  = f.input :undetermined_actions, 
      label: 'Undetermined',
      collection: @notification_methods.map{|s| [s.name, s.id]}, 
      input_html: { multiple: true, size: 3 }, 
      include_hidden: false 

= content_for :javascripts do
  :javascript
    $(function() {
      $('#alarm_actions').toggle($('#alarm_definition_actions_enabled').is(':checked'))
 
      $('#alarm_definition_actions_enabled').change(function(){
         $('#alarm_actions').toggle('fast');
      });
      
      $('#use_wizard_btm').click(
        function(){
          use_wizard();
        }
      );
    });
    
    function use_wizard() {
      
      var data = {
          modal: true,
          modal_transition: true,
          name: $('#alarm_definition_name').val(),
          description: $('#alarm_definition_description').val(),
          severity: $('#alarm_definition_severity').val(),
          actions_enabled: $('#alarm_definition_actions_enabled').val(),
          ok_actions: $('#alarm_definition_ok_actions').val(),
          alarm_actions: $('#alarm_definition_alarm_actions').val(),
          undetermined_actions: $('#alarm_definition_undetermined_actions').val(),
        };
      
      // ripped from /app/assets/javascripts/modal.js.coffee
      $('#modal-holder').find('.modal').find('.modal-body').html('<div class="loading-spinner"></div><div class="loading-text">Loading...</div>');
      $.ajax({
        dataType: 'html',
        url: "#{plugin('monitoring').create_expression_alarm_definitions_path()}",
        data: data,
        success: function(data, textStatus, jqXHR) {
          var $back, $data, $footer;
          $data = $(data);
          $footer = $data.find('.modal-footer');
          if ($footer.length > 0) {
            $back = $('<a href="javascript:void(0)" class="btn btn-primary">Back</a>');
            $back.click(function() {
              return History.back();
            });
            $footer.prepend($back);
          }
          $('#modal-holder').find('.modal').modal('hide');
          $('#modal-holder').html($data).find('.modal').modal();
        }
      });
    }

