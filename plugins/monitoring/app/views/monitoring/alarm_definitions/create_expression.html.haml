= content_for :title do
  First Create Expression

- unless modal?
  %h4 First Create Expression 

= form_tag plugin('monitoring').from_expression_wizzard_new_alarm_definitions_path(), method: :post, remote: modal?, id: 'expression_data'  do
  = hidden_field_tag 'expression'
  = hidden_field_tag 'filter_by_dimensions'
  
.modal-body
  %p.alert.alert-error.create-expression-error
  .row
    .col-md-11
      = label_tag 'expression_preview', 'Preview', class:'control-label'
      .panel.panel-default
        .panel-body.panel-expression
          .row
            .col-md-11
              .expression-preview#preview
            .col-md-1
              .loading-place.loading-right
    .col-md-1.reset-btn
      = link_to "Reset", plugin('monitoring').create_expression_alarm_definitions_path(), class: 'btn btn-default', title: 'this will reload everything', data: { modal:true }
  .row
    .col-md-6
      .row
        .col-md-12#start_with_dimension_row
          .form-group
            = label_tag 'dimension-name', 'Prefilter', class:'control-label'
            %select.dimension-name.form-control{onchange: 'get_dimension_values();',title: 'choose dimension to prefilter metrics list'}
              - ['hostname','observer_host','url','device','service','component'].sort.each do |dimension|
                %option{value: dimension} #{dimension}
            %span.help-block
              A dimension can be used to uniquely identify a metric
        #start_with_dimension_value
        
      #start_with_metric
        = render partial:"metrics"
      
      #expression_dimensions
      .hide-on-start
        .form-group
          = label_tag 'statistical_function', 'Statistical Function', class: 'control-label'
          %select#statistical_function.form-control.selectpicker
            - ['avg','min','max','sum','count'].each do |statistical_function|
              %option{value: statistical_function} #{statistical_function}
        .form-group.period
          = label_tag 'period', 'Period', class: 'control-label'
          .row
            .col-md-3
              = text_field_tag 'period_custom', 60, class: 'form-control'
            .col-md-9.period-slider
              -# note: we need the style tag here to render the slide in correct size (css class is not working)
              = text_field_tag 'period_slider', nil, type: 'text', style: 'width:95%;' ,class: 'form-control'
          %span.help-block.period
            Period is the number of seconds for the measurement to be done on. It must be an integer multiple of 60. The default period is 60 seconds.
        .form-group.threshold
          .row  
            .col-md-4
              = label_tag 'threshold_relational_operator', 'Threshold', class: 'control-label'
              %select#threshold_relational_operator.form-control.selectpicker
                - ['<','>','<=','>='].each do |threshold|
                  %option{value: threshold} #{threshold}
            .col-md-8
              = label_tag 'threshold_value', 'Value', class: 'control-label'
              = text_field_tag 'threshold_value', 60, class: 'form-control'
          %span.help-block.threshold
            Threshold values are always in the same units as the metric that they are being compared to.
    .col-md-6
      .row.hide-on-start
        .col-md-12.statistic
          = label_tag 'statistic', 'Statistic', class: 'control-label'
          = link_to "Reload", '#', id: 'reload_statistic_btn', onclick:'show_statistic()', class: '%button btn btn-default btn-xs pull-right'
          %svg#statistic{style:"width:425px; height:490px;"}
          %span.help-block
            The graph shows the historical data from the last 2 hours. Playing with the dimensions, statistical function and period should help you to find a good treshold value.

.buttons{ class: modal? ? 'modal-footer' : '' }
  - unless modal?
    = link_to "Cancel", plugin('monitoring').alarm_definitions_path(), class: 'btn btn-default'
    
  %button.btn.btn-primary.hide-on-start{ type: 'submit', form:'expression_data', id: 'alarm_definition_ready_btn' }
    Next

:javascript
  // all metric names
  var metric_names = #{@metric_names.to_json};
  var wizard_mode = "create";

= render partial: 'expression_wizard_client_logic'

