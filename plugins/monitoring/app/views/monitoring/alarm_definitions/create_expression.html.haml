= content_for :title do
  Alarm Definition Step #{@step_count}

.modal-body
  %h4 Create Expression #{@step_count}
  %p.alert.alert-error.create_expression_error
  .row
    .col-md-11
      .panel.panel-default
        .panel-body.panel-expression
          .row
            .col-md-11
              #expression
            .col-md-1
              .loading_place.loading-right
    .col-md-1.reset_btn
      = link_to "Reset", plugin('monitoring').create_expression_alarm_definitions_path(), class: 'btn btn-default', title: 'this will reload everything', data: { modal:true }
  .row
    .col-md-6
      %label.control-label{ for:'metric'}
        Metric
      %input{id:'metric', type: 'text', class: 'form-control metric', data: { provide: "typeahead" }, placeholder: "cpu.idle_perc"}
      %span.help-block
        A metric is uniquely identified by a name and set of dimensions.
      #expression_dimensions
      %label.control-label{ for:'statistical_function'}
        Statistical Function
      %select#statistical_function.form-control{onchange: 'monitoring.generate_expression();'}
        %option{value: 'avg'} avg
        %option{value: 'min'} min
        %option{value: 'max'} max
        %option{value: 'sum'} sum
        %option{value: 'count'} count
      %span.help-block
        What is the statistical function..
      .form-group#period_slider
        %label.control-label{ for:'period'}
          Period
        .row
          .col-md-3
            %input{id: 'period_custom', class: 'form-control', value: 60}
          .col-md-9.period-slider
            -# note: we need the style tag here to render the slide in correct size (css class is not working)
            %input{id: 'period', type: 'text', style: 'width:95%;' ,class: 'form-control', data: { slider: { width: '500px', id: 'period', min: 60, max: 600, step: 60, value: 60 } }}
      %span.help-block
        Period is the number of seconds for the measurement to be done on. It must be an integer multiple of 60. The default period is 60 seconds.
      %label.control-label{ for:'htreshold'}
        Threshold
      %select#threshold.form-control{onchange: 'monitoring.generate_expression();'}
        %option{value: '<'} <
        %option{value: '>'} >
        %option{value: '<='} <=
        %option{value: '>='} >=
    -#.col-md-6
      Preview Statistics
      .bs-callout.bs-callout-info
        Good to know......

.buttons{ class: modal? ? 'modal-footer' : '' }
  - if modal?
    %button.btn.btn-default{ type: 'button', data: { dismiss: 'modal' }, aria: { label: 'Cancel' } }
      Cancel
  - else
    = link_to "Cancel", "", class: 'btn btn-default'
  
  = link_to "Create Another Expression", "", class: 'btn btn-primary disabled'
  = link_to "Create Definition", plugin('monitoring').new_alarm_definition_path(), class: 'btn btn-primary disabled', data: { modal:true }  

  
:javascript
  // TODO:
  // error handling on ajax calls
  // onclick events $("#bla").click(function() {});
  // wenn keine dimensionen gefunden wurden fehler anzeigen!
  
  // all metric names
  var metric_names = #{@metric_names.to_json};
  // global dimension counter
  var dimension_cnt = 0;

  var period_slider = $('#period').slider({
    formatter: function(value) {
      return value+' sec';
    }
  }).on(
    "slide", function(slide_event) { 
       //console.log(slide_event.value);
       monitoring.generate_expression();
       $('#period_custom').val(slide_event.value);
    }
  );
  
  $("#period_custom").change(function() {
    monitoring.generate_expression();
  });
  
  
  $(function(){
    // set typeahead for metrics
    $("#metric").typeahead({ source:  metric_names, afterSelect: 
      function(){ 
        // this is called once to get the dimension data
        get_dimensions($('#metric').val());
        // cleanup everything
        dimension_cnt = 1;
        $('#expression_dimensions').empty();
        $('.expression_dimension_head').css('display','inline');
        // render the row based on dimension_data and the template
        render_dimension_row(dimension_cnt);
      }
    });
    // initial autofocus
    setTimeout(function() {
      $("#metric").focus().select();
      monitoring.generate_expression();
    }, 0);
  });

  function render_dimension_row(ID) {
    // if no dimension was found do nothing
    if (dimension_data) {
      var dimension_keys = Object.keys(dimension_data);
      $.post( "#{plugin('monitoring').dimension_row_alarm_definitions_path()}", {cnt: ID, keys: JSON.stringify(dimension_keys)}, 
        function( data ){ 
          // render row data
          $('#expression_dimensions').append(data);
          autocomplete_dimension_values(ID);
      });
    }
  }
  
  function autocomplete_dimension_values(ID) {
    // destroy old typeahead
    $("#dimension_value_"+ID).typeahead('destroy');
    // get typeahead data
    var selected_dimension_key = $("#dimension_key_"+ID).val();
    var dimension_values = dimension_data[selected_dimension_key];
    // set typeahead for values
    $("#dimension_value_"+ID).typeahead({ source: dimension_values, afterSelect: 
      function(){
        // remove selected value from array
        var selected_dimension_value = $("#dimension_value_"+ID).val();
        var value_index =  dimension_data[selected_dimension_key].indexOf(selected_dimension_value);
        // console.log(value_index);
        dimension_data[selected_dimension_key].splice(value_index,1);
        // remove key if no values left
        if ( dimension_data[selected_dimension_key].length == 0 ) {
          delete dimension_data[selected_dimension_key];
        }
        // render new row
        dimension_cnt++
        render_dimension_row(dimension_cnt); 
        monitoring.generate_expression();
        // made row read only
        $("#dimension_value_"+ID).prop("readonly", true);
        //$("#dimension_key_"+ID).prop("readonly", true);
        $("#dimension_key_"+ID).prop("disabled", "disabled");
      }
    });
    // set fokus to value field
    $("#dimension_value_"+ID).focus();
    
    var id_before = ID - 1;
    // console.log(id_before);
    if($('#expression_remove_dimension_btn_'+id_before)) {
      $('#expression_remove_dimension_btn_'+id_before).removeClass('disabled');
    }
  }

  // we used here a global value because it is used by render_dimension_row that and
  // dimension_data is only generated once
  var dimension_data;
  function get_dimensions(METRIC_NAME) {
    $.ajax({
      url: "#{plugin('monitoring').dimensions_by_metric_alarm_definitions_path()}",
      data: { name: METRIC_NAME },
      success: function( data ) { 
        dimension_data = data; 
        // normalize data
        $(Object.keys(dimension_data)).each(function(index,dimension_key) {
          //console.log(dimension_key);
          var unique_values = [];
          // removed doubled entrys
          // http://stackoverflow.com/questions/9229645/remove-duplicates-from-javascript-array
          $.each(dimension_data[dimension_key], function(i, value){
              if($.inArray(value, unique_values) === -1) unique_values.push(value);
          });
          dimension_data[dimension_key] = unique_values;
        })
      },
      error: function(jqXHR) {
        $('.create_expression_error').css('display','block');
        $('.create_expression_error').html('Metric Dimensions Error: '+jqXHR.status+' '+jqXHR.statusText);
      },
      // async false because I need the dimension_data in any case first
      async: false
    });
  }
  
  
