= content_for :title do
  Alarm Definition Step #{@step_count}

.modal-body
  %h4 Create Expression #{@step_count}
  .row
    .col-md-11
      .panel.panel-default
        .panel-body.panel-expression
          .row
            .col-md-11
              #expression
            .col-md-1
              .loading_place.loading-right
    .col-md-1.reset_btn
      = link_to "Reset", plugin('monitoring').create_expression_alarm_definitions_path(), class: 'btn btn-default btn-sm', title: 'this will reload everything', data: { modal:true }
  .row
    .col-md-6
      %label{ for:'metric'}
        %abbr{title:"required"} *
        Metric
      %input{id:'metric', class: 'form-control metric', data: { provide: "typeahead" }}
      %p.help-block
        A metric is uniquely identified by a name and set of dimensions.
      #expression_dimensions
      %label{ for:'statistical_function'}
        %abbr{title:"required"} *
        Statistical Function
      %select#statistical_function.select.required.form-control{onchange: 'monitoring.generate_expression();'}
        %option{value: 'avg'} avg
        %option{value: 'min'} min
        %option{value: 'max'} max
        %option{value: 'sum'} sum
        %option{value: 'count'} count
      #period
      #treshold
    -#.col-md-6
      Preview Statistics
      .bs-callout.bs-callout-info
        Good to know......

.buttons{ class: modal? ? 'modal-footer' : '' }
  - if modal?
    %button.btn.btn-default{ type: 'button', data: { dismiss: 'modal' }, aria: { label: 'Cancel' } }
      Cancel
  - else
    = link_to "Cancel", "", class: 'btn btn-default'
  
  = link_to "Create Another Expression", "", class: 'btn btn-primary disabled'
  = link_to "Create Definition", plugin('monitoring').new_alarm_definition_path(), class: 'btn btn-primary disabled', data: { modal:true }  

  
:javascript
  // all metric names
  var metric_names = #{@metric_names.to_json};
  // global dimension counter
  var dimension_cnt = 0;
  
  $(function(){
    // set typeahead for metrics
    $("#metric").typeahead({ source:  metric_names, afterSelect: 
      function(){ 
        monitoring.generate_expression(); 
        get_dimensions($('#metric').val());
        // cleanup everything
        dimension_cnt = 1;
        $('#expression_dimensions').empty();
        $('.expression_dimension_head').css('display','inline');
        render_dimension_row(dimension_cnt);
      }
    });
    // initial autofocus
    setTimeout(function() {
      $("#metric").focus().select();
      monitoring.generate_expression();
    }, 0);
  });

  function render_dimension_row(ID) {
    $.get( "#{plugin('monitoring').dimension_row_alarm_definitions_path()}", {cnt: ID}, 
      function( data ){ 
        // get row data
        $('#expression_dimensions').append(data);
        // set autocompletion for dimension key
        dimension_keys = Object.keys(dimension_data);
        $("#dimension_key_"+ID).typeahead({ source: dimension_keys, afterSelect: function(){
          // destroy old typeahead
          $("#dimension_value_"+ID).val("");
          $("#dimension_value_"+ID).typeahead('destroy');
          var selected_dimension_key = $("#dimension_key_"+ID).val();
          var dimension_values = dimension_data[selected_dimension_key];
          // set typeahead for values
          $("#dimension_value_"+ID).typeahead({ source: dimension_values, afterSelect: 
            function(){
              // remove selected value from array
              var selected_dimension_value = $("#dimension_value_"+ID).val();
              var value_index =  dimension_data[selected_dimension_key].indexOf(selected_dimension_value);
              // console.log(value_index);
              dimension_data[selected_dimension_key].splice(value_index,1);
              // remove key if no values left
              if ( dimension_data[selected_dimension_key].length == 0 ) {
                delete dimension_data[selected_dimension_key];
              }
              // render new row
              dimension_cnt++
              render_dimension_row(dimension_cnt); 
              monitoring.generate_expression();
              // made row read only
              $("#dimension_value_"+ID).prop("readonly", true);
              $("#dimension_key_"+ID).prop("readonly", true);
              // show remove button
              $('#expression_remove_dimension_btn_'+ID).removeClass('disabled');
            }
          });
          $("#dimension_value_"+ID).focus();
        }
      });
                
      $("#dimension_key_"+ID).focus();
    });
  }

  var dimension_data;
  function get_dimensions(METRIC_NAME) {
    $.ajax({
      url: "#{plugin('monitoring').dimensions_by_metric_alarm_definitions_path()}",
      data: { name: METRIC_NAME },
      success: function( data ) { 
        dimension_data = data; 
        // remove doubled entrys
        $(Object.keys(dimension_data)).each(function(index,dimension_key) {
         $.unique( dimension_data[dimension_key]);
        })
      },
      async: false
    });
  }
  
  
