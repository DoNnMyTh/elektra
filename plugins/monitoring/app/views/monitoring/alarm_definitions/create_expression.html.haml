= content_for :title do
  First Create Expression

- unless modal?
  %h4 First Create Expression 

= form_tag plugin('monitoring').from_expression_wizzard_new_alarm_definitions_path(), method: :post, remote: modal?, id: 'expression_data'  do
  = hidden_field_tag 'expression'
  = hidden_field_tag 'filter_by_dimensions'
  
.modal-body
  %p.alert.alert-error.create-expression-error
  .row
    .col-md-11
      = label_tag 'expression_preview', 'Preview', class:'control-label'
      .panel.panel-default
        .panel-body.panel-expression
          .row
            .col-md-11
              -# chain expressions keep it vor later
              -#  - index = 0;
              -#  - @sub_expressions.each do |expression, logical_operator|
              -#    - if logical_operator
              -#      .sub-expression.text-success
              -#        - index += 1
              -#        = expression+logical_operator
              -#        = icon( 'trash', class: 'delete-expression', title: 'remove expresssion from chain', onclick: '$(this).parent().fadeOut(100).remove();')
                  
              .expression-preview#preview
              
              -#%button.btn.btn-success.btn-xs.hide.pull-left{ id: 'chain_expression_btn', type: 'submit'}
              -#  Chain Expression

            .col-md-1
              .loading_place.loading-right
    .col-md-1.reset-btn
      - if modal?
        = link_to "Reset", plugin('monitoring').create_expression_alarm_definitions_path(), class: 'btn btn-default', title: 'this will reload everything', data: { modal_transition:true }
      - else
        = link_to "Reset", plugin('monitoring').create_expression_alarm_definitions_path(), class: 'btn btn-default', title: 'this will reload everything'
  .row
    .col-md-6
      .form-group
        = label_tag 'metric', 'Metric', class:'control-label'
        = text_field_tag 'metric', nil, class: 'form-control metric', data: { provide: "typeahead" }, placeholder: "cpu.idle_perc", autocomplete: "off"
        %span.help-block
          A metric is uniquely identified by a name and set of dimensions.
      #expression_dimensions
      .hide-on-start
        .form-group
          = label_tag 'statistical_function', 'Statistical Function', class: 'control-label'
          %select#statistical_function.form-control
            %option{value: 'avg'} avg
            %option{value: 'min'} min
            %option{value: 'max'} max
            %option{value: 'sum'} sum
            %option{value: 'count'} count
        .form-group.period
          = label_tag 'period', 'Period', class: 'control-label'
          .row
            .col-md-3
              = text_field_tag 'period_custom', 60, class: 'form-control'
            .col-md-9.period-slider
              -# note: we need the style tag here to render the slide in correct size (css class is not working)
              = text_field_tag 'period_slider', nil, type: 'text', style: 'width:95%;' ,class: 'form-control'
          %span.help-block.period
            Period is the number of seconds for the measurement to be done on. It must be an integer multiple of 60. The default period is 60 seconds.
        .form-group.threshold
          .row  
            .col-md-4
              = label_tag 'threshold_relational_operator', 'Threshold', class: 'control-label'
              %select#threshold_relational_operator.form-control{onchange: 'generate_expression();'}
                %option{value: '<'} <
                %option{value: '>'} >
                %option{value: '<='} <=
                %option{value: '>='} >=
            .col-md-8
              = label_tag 'threshold_value', 'Value', class: 'control-label'
              = text_field_tag 'threshold_value', 60, class: 'form-control'
          %span.help-block.threshold
            Threshold values are always in the same units as the metric that they are being compared to.

        -# chain expressions keep it vor later
        -#= label_tag 'chain_operator', 'Chain Operator*', class: 'control-label'
        -#%select#chain_operator.form-control{onchange: 'generate_expression();'}
        -#  %option
        -#  %option{value: 'AND'} and
        -#  %option{value: 'OR'} or
        -#%span.help-block
        -#  Chain expressions with logical operators together (optional).

    .col-md-6.hide-on-start
      .row
        .col-md-12{style: 'padding-left:0px'}
          = label_tag 'statistic', 'Statistic', class: 'control-label'
          = link_to "Reload", '#', id: 'reload_statistic_btn', onclick:'show_statistic()', class: '%button btn btn-default btn-xs pull-right'
          %svg#statistic{style:"width:100%; height:400px;"}
          %span.help-block
            The graph shows the historical data from the last 2 hours. Playing with the dimensions, statistical function and period should help you to find a good treshold value.

.buttons{ class: modal? ? 'modal-footer' : '' }
  - if modal?
    = button_tag 'Cancel', type: 'button', data: { dismiss: 'modal' }, aria: { label: 'Cancel' }, class: 'btn btn-default'
    =# link_to "Next", plugin('monitoring').new_alarm_definition_path(), id: 'create_alarm_definition_btn', class: 'btn btn-primary disabled', data: { modal:true }  
  - else
    = link_to "Cancel", plugin('monitoring').alarm_definitions_path(), class: 'btn btn-default'
    
  %button.btn.btn-primary.hide{ type: 'submit', form:'expression_data', id: 'create_alarm_definition_btn' }
    Next
        
:javascript
  // all metric names
  var metric_names = #{@metric_names.to_json};
  // global dimension counter
  var dimension_cnt = 0;
  // we used here a global value because it is used by render_dimension_row that and
  // dimension_data is only generated once
  var dimension_data;
  
  $('#period_slider').slider({
    step: 60,
    min: 60,
    max: 600,
    value:60,
    formatter: function(value) {
      return value+' sec';
    }
  }).on(
    "slide", function(slide_event) { 
       //console.log(slide_event.value);
       generate_expression();
       $('#period_custom').val(slide_event.value);
       // send change to trigger statistic reload after 1 second
       $('#period_custom').trigger("change");
    }
  );
  
  $(function(){
    // set typeahead for metrics
    $("#metric").typeahead({source:  metric_names, afterSelect: 
      function(){ 
        var metric_name = $('#metric').val();
        // this is called once to get the dimension data
        get_dimensions(metric_name);
      }
    });
    
    // initial autofocus
    setTimeout(function() {
      $("#metric").focus().select();
      $('#preview').addClass('expression-preview text-info pull-left');
      $('#preview').text('please define me');
    }, 0);
    
    // events
    // delay change event for 1 second
    $('#period_custom, #threshold_value').change(monitoring.throttle(function(){
      generate_expression();
      show_statistic();
    },1000));
    
    $('#statistical_function').change(function(){
      generate_expression();
      show_statistic();
    });
  });

  function render_dimension_row(ID) {
    // if no dimension was found do nothing
    if (dimension_data) {
      var dimension_keys = Object.keys(dimension_data);

      $.get( "#{plugin('monitoring').dimension_row_alarm_definitions_path()}", {
        cnt: ID, 
        keys: JSON.stringify(dimension_keys), 
        // in case of invalid token we don't want to follow the redirect from the server to the logon page
        // instead we handle that case in check_logon_state()
        do_not_redirect: true
      }, 
        function( data, status, xhr){ 
        
          check_logon_state(xhr);
          // render row data
          $('#expression_dimensions').append(data);

          // set fokus to key field
          $("#dimension_key_"+ID).focus();
          $("#dimension_value_"+ID).prop('readonly',true);
          $('.hide-on-start').fadeIn();

          // enable remove button
          var id_before = ID - 1;
          if($('#expression_remove_dimension_btn_'+id_before)) {
            $('#expression_remove_dimension_btn_'+id_before).removeClass('disabled');
          }
          
          // remove all dimensions keys that are used and
          // write the keys for later in creation form  and match by 
          var dimension_keys = Object.keys(dimension_data);
          $('.dimension_key').each(function(){
            var used_dimension_key = $(this).val();
            var index = dimension_keys.indexOf(used_dimension_key)
            dimension_keys.splice(index,1);
          })
          $('#filter_by_dimensions').val(dimension_keys);
          
          // update preview
          generate_expression();
      }).error (function(xhr) {
        show_error(xhr);
      });
    }
  }
  
  function autocomplete_dimension_values(ID) {
    // destroy old typeahead
    $("#dimension_value_"+ID).typeahead('destroy');
    if($("#dimension_key_"+ID).val() != '') {
      // get typeahead data
      var selected_dimension_key = $("#dimension_key_"+ID).val();
      var dimension_values = dimension_data[selected_dimension_key];
      // set typeahead for values
      $("#dimension_value_"+ID).typeahead({ source: dimension_values, afterSelect: 
        function(){
          // to prevent random user input only the input from typeahead is valid
          $("#dimension_value_"+ID).data('valid',true);
          // remove selected value from array
          var selected_dimension_value = $("#dimension_value_"+ID).val();
          var value_index =  dimension_data[selected_dimension_key].indexOf(selected_dimension_value);
          // console.log(value_index);
          dimension_data[selected_dimension_key].splice(value_index,1);
          // remove key if no values left
          if ( dimension_data[selected_dimension_key].length == 0 ) {
            delete dimension_data[selected_dimension_key];
          }
          // render new row
          dimension_cnt++
          render_dimension_row(dimension_cnt); 
          generate_expression();
          // made row read only
          $("#dimension_value_"+ID).prop("readonly", true);
          $("#dimension_key_"+ID).prop("disabled", "disabled");
          show_statistic();
        }
      });
  
      // set fokus to value field
      $("#dimension_value_"+ID).prop('readonly',false);
      $("#dimension_value_"+ID).focus();
    }
    else {
      // empty key
      $("#dimension_value_"+ID).prop('readonly',true);
    }
  }

  // load the logon page if we got a new location
  // that happens when the token was invalid
  function check_logon_state(XHR) {
    if(XHR.getResponseHeader('Location')) {
      // close modal window
      $('#modal-holder').find('.modal').modal('hide');
      // load logon page
      window.location = "#{ monsoon_openstack_auth.login_path(domain_name:@scoped_domain_name, after_login:@after_login) }";
    }
  }
  
  function show_error(XHR) {
    $('.create-expression-error').css('display','block');
    $('.create-expression-error').html('Metric Dimensions Error: '+XHR.status+' '+XHR.statusText);
  }

  function get_dimensions(METRIC_NAME) {
    $.get("#{plugin('monitoring').dimensions_for_metric_alarm_definitions_path()}", { 
      name: METRIC_NAME,
      // in case of invalid token we don't want to follow the redirect from the server to the logon page
      // instead we handle that case in check_logon_state()
      do_not_redirect: true 
    },
      function( data,status,xhr ) { 

        check_logon_state(xhr);

        dimension_data = data; 
        // normalize data
        $(Object.keys(dimension_data)).each(function(index,dimension_key) {
          //console.log(dimension_key);
          var unique_values = [];
          // removed doubled entrys
          // http://stackoverflow.com/questions/9229645/remove-duplicates-from-javascript-array
          $.each(dimension_data[dimension_key], function(i, value){
              if($.inArray(value, unique_values) === -1) unique_values.push(value);
          });
          dimension_data[dimension_key] = unique_values;
        });
        
        generate_expression();
        var dimension_keys = Object.keys(dimension_data);
        // write dimension keys for later use in match by
        // hier dürfen nur keys rein die noch nirgends verwendet wurden!!!
        
        $('#filter_by_dimensions').val(dimension_keys.toString())

        // cleanup everything
        dimension_cnt = 1;
        $('#expression_dimensions').empty();
        $('.expression_dimension_head').fadeIn();
        // render the row based on dimension_data and the template
        render_dimension_row(dimension_cnt);
        show_statistic();

      }).error( function(xhr) {
        show_error(xhr);
      });
  }
  
  function show_statistic() {

    // cleanup left overs
    // http://stackoverflow.com/questions/22452112/nvd3-clear-svg-before-loading-new-chart
    // http://stackoverflow.com/questions/28560835/issue-with-useinteractiveguideline-in-nvd3-js
    // https://github.com/Caged/d3-tip/issues/133
    d3.selectAll("svg > *").remove();
    d3.select("#statistic")
      .on("mousemove", null)
      .on("mouseout", null)
      .on("dblclick", null)
      .on("click", null);
    d3.select(".nvtooltip").remove();
    
    $('#statistic').html('<text class="nvd3 nv-noData" dy="-.7em" style="text-anchor: middle;" x="217" y="187.5"}>Loading Data.</text>');

    $.get( "#{plugin('monitoring').statistics_alarm_definitions_path()}", {
      metric: $('#metric').val(),
      dimensions: expression_dimensions(),
      period: $('#period_custom').val(),
      threshold: $('#threshold_value').val(),
      statistical_function: $('#statistical_function').val(),
      // in case of invalid token we don't want to follow the redirect from the server to the logon page
      // instead we handle that case in check_logon_state()
      do_not_redirect: true
    },function(data,status,xhr) {
      
      check_logon_state(xhr);
      $('#statistic').empty();
      nv.addGraph(function() {
        var chart = nv.models.lineChart();
        
        chart.margin({"left":30,"right":30,"top":5,"bottom":30});
        chart.useInteractiveGuideline(true);
        chart.xAxis.tickFormat(function(d) { return d + ' min' });
      
        d3.select('#statistic')
          .datum(data)
          .transition().duration(500)
          .call(chart)
          ;
      
        nv.utils.windowResize(chart.update);
        return chart;
      });
      
      $('#reload_statistic_btn').removeClass('disabled');
    }).error (function(xhr) {
        show_error(xhr);
    });
  }

  function generate_expression() {
    
    var valid = true;
    $('.create-expression-error').css('display','none');
    
    // metrics
    var metric = $('#metric').val();
    if(metric == "")valid = false;
    
    // dimensions
    var dimensions = expression_dimensions();
    
    if (dimensions != "") {
      dimensions = "{"+dimensions+"}";
    }
  
    // statistical function
    var statistical_function = $('#statistical_function').val();
    
    // period
    var period = $('#period_custom').val();
    if(period == "") valid = false;
    // validation
    period = Math.floor(period);
    var numberReg =  /^[0-9]+$/;
    if (!numberReg.test(period/60)) {
      $('.period.help-block').hide();
      $('.period').addClass('has-error');
      $('.period').append("<span class='help-block' id='period_error'>Period is not a multiple of 60 or an integer</span>");
      period = '-'
      valid = false;
    }
    else {
      $('#period_error').remove();
      $('.period').removeClass('has-error');
      $('.period.help-block').show();
    }
    
    // relational operator
    var relational_operator = $('#threshold_relational_operator').val();
    if(relational_operator == "") valid = false;
    var threshold_value = $('#threshold_value').val();
    if(!$.isNumeric(threshold_value)) {
      $('.threshold.help-block').hide();
      $('.threshold').addClass('has-error');
      $('.threshold').append("<span class='help-block' id='threshold_error'>Threshold must be a number</span>");
      threshold_value = '-';
      valid = false;
    }
    else {
      $('#threshold_error').remove();
      $('.threshold').removeClass('has-error');
      $('.threshold.help-block').show();
    }
  
  //  chain expressions keep it vor later
  //  var chain_operator = $('#chain_operator').val();
  //  if(chain_operator != '' && valid) {
  //    $('#chain_expression_btn').removeClass('hide');
  //    $('#create_alarm_definition_btn').addClass('hide');
  //  }
  //  else {
  //    $('#chain_expression_btn').addClass('hide');
  //    $('#create_alarm_definition_btn').removeClass('hide');
  //  }
  
    // colorize expression
    $('#preview').removeClass();
    if(valid) {
      $('#preview').addClass('expression-preview text-success pull-left');
      $('#create_alarm_definition_btn').removeClass('hide');
    }
    else {
      $('#create_alarm_definition_btn').addClass('hide');
      $('#preview').addClass('expression-preview text-danger pull-left');
    }
  
    // render current expression
    var expression = statistical_function+" ("+metric+dimensions+", "+period+") "+relational_operator+" "+threshold_value//+" "+chain_operator;
    $('#preview').text(expression);
  
  //  chain expressions keep it vor later
  //  // collect all chained expressions
      var sub_expression = "";
  //  $('.sub-expression').each(function(){
  //    sub_expression += " "+$(this).text().trim();
  //  });
  
    // write it to form for submit
    $('#expression').val($.trim(sub_expression+" "+expression));
  //  $('#ready_expressions').val($.trim(sub_expression+" "+expression));
  
  } 
  
  function remove_dimension_row(ID) {
    // add value to choosen dimension key
    var dimension_key = $("#dimension_key_"+ID).val();
    var dimension_value = $("#dimension_value_"+ID).val();
  
    // check for exiting key
    if(!dimension_data.hasOwnProperty(dimension_key)) {
      // create key and empty array
      dimension_data[dimension_key] = [];
    }
  
    // add free value to array
    dimension_data[dimension_key].push(dimension_value);
    // remove entry
    $('#expression_dimension_'+ID).remove();
    // remove latest empty dimension key - value input and render new to update typeahead
    $('#expression_dimension_'+dimension_cnt).remove();
    // generate expression and render new dimension row
    generate_expression();
    render_dimension_row(dimension_cnt);
    show_statistic();
  };


  function get_metric_names() {
    
  	var metric_names_unfiltered = []
    $.each(metrics_data, function( index, metric ) {
      metric_names_unfiltered.push(metric[0]);
    });
    //console.log(metric_names_unfiltered);
    
    var metric_names_unique = metric_names_unfiltered.filter(function(metric_name, i, ar){ 
      return ar.indexOf(metric_name) === i; 
    });
    //console.log(metric_names_unique);
    
    return metric_names_unique;
  };
  
  function expression_dimensions() {
    // dimensions
    var dimensions = "";
    $('.dimension_key').each(function( ) {
      if($( this ).text() != '' ) {
        var defintion_id = $(this).data('id')
        var key = $( this ).val();
        
        var valid_value = $('#dimension_value_'+defintion_id).data('valid');
        if(valid_value) {
          var value = $('#dimension_value_'+defintion_id).val();
          if(key != '' && value != '') {
            dimensions += key+"="+value+",";
          }   
        }
      }
    });
    
    // remove the last comma
    dimensions = dimensions.slice(0, -1);
    
    return dimensions;
  }
