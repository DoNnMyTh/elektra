= content_for :title do
  Container: #{@container.name}

- pl = plugin('object_storage')

= simple_modal_form_for @container, 'Update container', url: pl.container_path(@container.name), method: :put, cancel_url: pl.containers_path do |f|

  .row
    .col-md-6
      = f.input :object_count, readonly: true, input_html: { value: Core::DataType.new(:number).format(@container.object_count) }
      = f.input :total_size, readonly: true, input_html: { value: Core::DataType.new(:bytes).format(@container.bytes_used) }
    .col-md-6
      = f.input :object_count_quota, as: :integer, placeholder: 'Leave empty to disable'

      - initial_value = Core::DataType.new(:bytes).format(@container.bytes_quota) if @container.bytes_quota
      - value = params.fetch(:container, {}).fetch(:bytes_quota, initial_value)
      = f.input :bytes_quota, as: :string, input_html: { value: value }, placeholder: 'Leave empty to disable', label: 'Total size quota'

  - if @container.allows_public_access?
    = f.input :public_url, readonly: true, label: 'URL for public access'

  - if has_capability?('staticweb')
    .form-group#container_static_web
      %label Static Web
      - enabled = @container.web_index.present?
      .row{ class: enabled ? '' : 'collapsed' }
        .col-md-6
          = render layout: 'checkbox_with_label', locals: { name: 'container[has_web_index]', checked: enabled, options: { class: 'feature-select', disabled: !@container.public_read_access? } } do
            - unless @container.public_read_access?
              %span.fa.fa-exclamation-circle 
              Enable public access in access control to use this feature
            - else
              Serve objects as index
              %span.hide-when-collapsed with file name
        .col-md-6.hide-when-collapsed
          = f.input :web_index, as: :string, input_html: { value: @container.web_index || 'index.html' }, label: false

  .form-group#container_versions_location
    %label Object versioning
    - enabled = @container.versions_location.present? || @container.has_versions_location.present?
    .row{ class: enabled ? '' : 'collapsed' }
      .col-md-6
        = render layout: 'checkbox_with_label', locals: { name: 'container[has_versions_location]', checked: enabled, options: { class: 'feature-select' } } do
          Store old object versions
          %span.hide-when-collapsed in container:
      .col-md-6.hide-when-collapsed
        = f.input :versions_location, collection: @other_container_names, label: false, prompt: true

  .form-group
    %label Metadata
    = render partial: 'editable_metadata_display', locals: { metadata: @container.metadata }

=content_for :javascripts do
  :javascript

    $('input.feature-select[type=checkbox]').change(function() {
      $(this).closest('.row').toggleClass('collapsed', !$(this).is(':checked'));
    });

