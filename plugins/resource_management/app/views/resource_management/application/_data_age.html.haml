- can_sync = local_assigns.has_key?(:sync_now_url) && @min_updated_at < 1.minutes.ago

.row
  -# render the data age only if there is data
  -if @min_updated_at and @max_updated_at
    .col-md-10.col-md-offset-2.small.text-muted
      Usage data last updated #{data_age_as_string(@min_updated_at, @max_updated_at)}
      -# show "Sync now" if available, but only for data older than one minute
      -# (to avoid that users use this expensive function multiple times in quick succession)
      - if can_sync
        &ndash;
        %span.syncing-message.hidden
          Syncing
          %span.loading
        = link_to 'Sync now', "javascript:sync_now()", class: 'sync-now'
  -elsif local_assigns.has_key?(:sync_now_url)
    .col-md-12.small.text-muted
      No usage data available &ndash;
      %span.syncing-message.hidden
        Syncing
        %span.loading
      = link_to 'Sync now',"javascript:sync_now()", class: 'sync-now'

- if can_sync
  - error_message = "Could not complete sync before timeout. Please try again later."
  - content_for :javascripts do
    :javascript

       function sync_now_error() {
         $('.sync-now').show();
         $('.syncing-message').hide();
         $('.flashes').append("#{escape_javascript(render partial: 'flash_dismissible', locals: { key: 'warning', value: error_message })}");
       }

       function sync_now() {
        $('.sync-now').hide();
        $('.syncing-message').show();
        $.ajax({
          url: "#{sync_now_url}",
          dataType: 'script',
          error: sync_now_error,
        });
       }

       function sync_now_polling(startTime, retryCounter) {

        $.ajax({
          url: "#{plugin('resource_management').resources_path}",
          data : {
            'if_updated_since': startTime
          },
          success: function(response){
            if(response.sync_running) {
              if(retryCounter <= 3) {
                window.setTimeout(function(){ sync_now_polling(startTime, retryCounter + 1); }, 5000);
              }
              else {
                sync_now_error();
              }
            }
            else {
              location.reload();
            }
          },
          error: sync_now_error,
        });
      }

