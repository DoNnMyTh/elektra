-# GUI component for a resource usage bar
-#
-# Accepts via :locals the following arguments:
-#     fill:      { value: NUMBER, label: STRING }   - Size value and label for the usage display.
-#     maximum:   { value: NUMBER, label: STRING }   - Maximum value (determines scale), and label for the right edge.
-#     threshold: { value: NUMBER, label: STRING }   - Value and label for threshold mark.
-#     display_unit: NUMBER                          - Values will be divided by this unit when being interpolated into their label.
-# The hash arguments (fill, maximum, threshold) can also be given as a single number. Then the label is just the display value.
-#
-# The relation of usage to threshold determines the color of the usage display.
-# The threshold is not shown if it is larger than the maximum.
-# If the threshold is not given, the maximum value is used for the threshold, but without displaying it as threshold.
-# In all the label fields, a placeholder of $VALUE will be replaced with the value.

-# set default values for arguments
- maximum   ||= fill
- threshold ||= maximum
- fill        = { value: fill,      label: "$VALUE" } unless fill.is_a?(Hash)
- maximum     = { value: maximum,   label: "$VALUE" } unless maximum.is_a?(Hash)
- threshold   = { value: threshold, label: "$VALUE" } unless threshold.is_a?(Hash)
- display_unit ||= 1

-# precomputations
- upper_bound = maximum[:value]
- if maximum[:value] < 0
  - upper_bound = [ fill[:value], threshold[:value] ].max

- [fill,maximum,threshold].each do |hash|
  -# prepare labels
  - display_value  = (hash[:value].to_f / display_unit).to_i
  - hash[:label]   = hash[:label].gsub("$VALUE", display_value.to_s)
  -# calculate percentages for CSS
  - hash[:percent] = hash[:value] <= 0 ? 0 : (hash[:value].to_f / upper_bound * 100).to_i

.quota
  - if threshold[:value] >= 0 && threshold[:value] < upper_bound
    .quota-approved{:style => "right:#{100-threshold[:percent]}%"}
      %span.text-nowrap= threshold[:label]
  %div{ class: maximum[:value] < 0 ? 'quota-current-danger' : 'quota-current' }
    %span.text-nowrap= maximum[:label]
  .progress
    -# place label next to bar instead of on bar?
    - outside_label = fill[:percent] < 5 ? fill[:label] : ''
    - if fill[:value] > 0
      -# render normal bar
      - bar_class = ''
      - bar_class = 'progress-bar-warning' if fill[:value] >= 0.8 *  threshold[:value]
      - bar_class = 'progress-bar-danger'  if fill[:value] > threshold[:value]
      - if threshold[:value] > 0
        - percent = [ fill[:percent], threshold[:percent] ].min
      - else
        - percent = fill[:percent]
      .progress-bar.progress-bar-quota{ class: bar_class, style: "width:#{percent}%" }= outside_label == '' ? fill[:label] : ''
      -# mark the part beyond the threshold as "overcommit"
      - if fill[:value] > threshold[:value]
        .progress-bar.progress-bar-quota.quota-overcommit-danger{ style: "width:#{fill[:percent] - threshold[:percent]}%" }
    - if maximum[:value] >= 0
      -# for finite maximum, mark empty area beyond the threshold as "overcommit"
      - if threshold[:value] < maximum[:value]
        - if fill[:value] >= threshold[:value]
          .progress-bar.progress-bar-quota.quota-overcommit{ style: "width:#{100 - fill[:percent]}%" }= outside_label
        - else
          .progress-bar.progress-bar-empty{ style: "width:#{threshold[:percent] - fill[:percent]}%" }= outside_label
          .progress-bar.progress-bar-quota.quota-overcommit{ style: "width:#{100 - threshold[:percent]}%" }
      - else
        .progress-bar.progress-bar-empty= outside_label
    - else
      -# for infinite maximum, mark all empty area as "overcommit"
      .progress-bar.progress-bar-quota.quota-overcommit{ style: "width:#{100 - fill[:percent]}%" }= outside_label
