- @area_services.each do |service|
  - if service.name.to_s != @area.to_s
    -# show service name if not equal to area name
    -# (this means that a service named like its area should always be at the top)
    %h3= t("resource_management.#{service.name}")
  - resources = @resources.select { |r| r.config.service.name == service.name }.sort_by(&:name)
  - if resources.empty?
    .bs-callout
      No #{t("resource_management.#{service.name}")} quotas found!
  - else
    - resources.sort_by(&:name).each do |res|
      = render partial: 'bar_row', locals: { resource: res, overview: false }

-# commented out because For other non swift quotas the user acting as cloud admin would need an admin role in each and every domain
-# this is right now not possible so we don't want to roll out a feature now to production (in thant case for swift) and than take it 
-# away from the user. First we need more clarity here...
=render partial: 'data_age' #, locals: { sync_now_url: plugin('resource_management').cloud_admin_sync_now_path }


