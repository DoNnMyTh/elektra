require "resource_management/resource_config"
require "resource_management/service_config"

module ResourceManagement
  class Resource < ActiveRecord::Base
    validates_presence_of :domain_id, :service, :name
    validate :validate_early_errors

    def config
      sn = service.to_sym
      rn = name.to_sym
      ResourceManagement::ResourceConfig.all.find { |r| r.service_name == sn && r.name == rn }
    end

    def data_type
      config.data_type
    end

    def default_quota=(new_value)
      if new_value.is_a?(String)
        begin
          new_value = data_type.parse(new_value)
          @value_validation_error = nil
        rescue ArgumentError => e
          # errors.add() only works during validation, so store this error for later
          @value_validation_error = e.message
          return
        end
      end
      super(new_value)
    end

    # Add a validation error generated by the controller. Since errors.add()
    # only works during validate(), we need to save these errors if we want to
    # present these errors in a simple_form. (TODO: This is a huge hack. Should
    # refactor the DB schema and model classes towards being able to do more
    # validations in the model.)
    def add_validation_error(field, error)
      (@early_errors ||= []).push([ field, error ])
    end

    private

    def validate_early_errors
      (@early_errors || []).each do |field, error|
        errors.add(field, error)
      end
    end


  end
end
