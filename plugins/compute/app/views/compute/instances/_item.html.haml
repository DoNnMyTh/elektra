- data = {}
- if instance.task_state
  - data[:update_url]=plugin('compute').update_item_instance_path(id:instance.id, target_state: local_assigns[:target_state])
  - data[:interval]=2500 

%tr{class: "state-#{instance.status.downcase if instance.status} #{'task-state ' + instance.task_state if instance.task_state}", data: data, id: "instance_#{instance.id}"}
  %td    
    - if current_user.is_allowed?("compute:instance_get", {})
      = link_to instance.name, plugin('compute').instance_path(id: instance.id), data: {modal: true}
    - else
      = instance.name

  %td= instance.addresses.keys.join(', ') if instance.addresses    
  %td.snug-nowrap  
    - instance.addresses.each do |network_name, ip_values|
      -if ip_values and ip_values.length>0
        .list-group.borderless
          - ip_values.each do |values|
            %p.list-group-item-text
              - if values["OS-EXT-IPS:type"]=='floating'
                %i.fa.fa-globe.fa-fw
              - elsif values["OS-EXT-IPS:type"]=='fixed'
                %i.fa.fa-desktop.fa-fw  
              = values["addr"]
              %span.info-text= values["OS-EXT-IPS:type"]
        
  
  %td= services.compute.image(instance.image.id).name rescue nil           
  %td= services.compute.flavor(instance.flavor.id).name rescue nil   
  %td= instance.power_state_string
  %td
    = instance.task_state.nil? ? instance.status.capitalize : instance.task_state
    - if instance.fault
      %br
      %span.info-text= instance.fault["message"] 
  
  %td.snug
    - if current_user.is_allowed?("compute:instance_delete", {target: { project: @active_project, scoped_domain_name: @scoped_domain_name}}) or current_user.is_allowed?("compute:instance_update", {})
      .btn-group
        %button.btn.btn-default.btn-sm.dropdown-toggle{ type: "button", data: { toggle: "dropdown"}, aria: { expanded: true} }
          %span.fa.fa-cog
          -# %span.spinner

        - unless instance.os_ext_sts_task_state
          %ul.dropdown-menu.dropdown-menu-right{ role:"menu"}
            - if current_user.is_allowed?("compute:instance_get", {target: { project: @active_project, scoped_domain_name: @scoped_domain_name}})
              %li= link_to 'Console', console_instance_path(id: instance.id), data: { modal: true}
                
            - if current_user.is_allowed?("compute:instance_update", {target: { project: @active_project, scoped_domain_name: @scoped_domain_name}})
              - if instance.floating_ips.length>0
                %li= link_to 'Detach Floating IP', plugin('compute').detach_floatingip_instance_path(id: instance.id, floating_ip: instance.floating_ips.first["addr"]), method: :delete, data: { confirm: 'Are you sure you want to detach floating?', ok: "Yes, detach it", confirmed: :loading_status}, remote: true
              - else
                %li= link_to 'Attach Floating IP', new_floatingip_instance_path(id: instance.id), data: {modal: true }
              
              - if [Compute::Server::SUSPENDED,Compute::Server::PAUSED,Compute::Server::SHUT_DOWN,Compute::Server::SHUT_OFF].include? instance.power_state
                %li= link_to 'Start', start_instance_path(id: instance.id), method: :put, data: {loading_status: true}, remote: true

              - if instance.power_state==Compute::Server::RUNNING
                %li.divider
                %li= link_to 'Stop', plugin('compute').stop_instance_path(id: instance.id), method: :put, data: { confirm: 'Are you sure you want to stop this instance?', ok: "Yes, stop it", confirmed: :loading_status}, remote: true  

                %li= link_to 'Pause', plugin('compute').pause_instance_path(id: instance.id), method: :put, data: { confirm: 'Are you sure you want to pause this instance?', ok: "Yes, stop it", confirmed: :loading_status }, remote: true  

                %li= link_to 'Suspend', plugin('compute').suspend_instance_path(id: instance.id), method: :put, data: { confirm: 'Are you sure you want to suspend this instance?', ok: "Yes, stop it", confirmed: :loading_status}, remote: true  

            - if current_user.is_allowed?("compute:instance_delete", {target: { project: @active_project, scoped_domain_name: @scoped_domain_name}})
              %li= link_to 'Terminate', plugin('compute').instance_path(id: instance.id), method: :delete, data: { confirm: 'Are you sure you want to terminate this instance?', ok: "Yes, terminate it", confirmed: :loading_status}, remote: true
