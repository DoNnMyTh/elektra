- wrapper = @private_networks.empty? ? :horizontal_form_disabled : :horizontal_form
= simple_form_for @instance, url: plugin('compute').instances_path, method: :post, remote: request.xhr?, html: {data: {modal: true}, class: 'form-horizontal' }, wrapper: wrapper do |f|

  %div{class: modal? ? 'modal-body' : ''}
    - if @instance.errors.present?
      .alert.alert-error
        = render_errors(@instance.errors)
      =# @instance.errors.full_messages.to_sentence + '.'
        
        
    - if @keypairs.blank?
      %p.alert.alert-warning
        There are no key pairs defined for your account. Without that, you can't access the server via ssh.
        You can define one
        = link_to 'here', keypairs_url()


    - if @private_networks.empty?
      - if current_user.is_allowed?("networking:network_private_create")
        = link_to 'New Private Network', plugin('networking').send("new_networks_private_path"), data: {modal: true}, class: 'btn btn-primary'
      - else
        = 'Please read '
        = link_to 'how to get a private network.', "#{sap_url_for('documentation')}docs/guides/advanced_private-network.html", target: '_blank'

    = f.input :name
    =# f.input :max_count, as: :integer #, input_wrapper_html: {class: 'col-sm-2'}

    = f.input :availability_zone_id, {label: "Availability zone",
      input_html:         {},
      as:                 :select,
      collection:         @availability_zones,
      selected:           @instance.availability_zone_id,
      required:           true}

    = f.input :security_groups, { label: "Security groups",
      input_html:         {multiple: true},
      as:                 :select,
      collection:         @security_groups.collect{|sg| [sg.name,sg.name]},
      selected:           (@instance.security_groups || []).collect{|sg| sg.name},
      required:           true}

    = f.input :keypair_id, { label: "Key pair",
      input_html:         {},
      as:                 :select,
      collection:         @keypairs,
      required:           false}

    = f.input :flavor_id, { label: "Flavor",
      as:                 :select,
      required:           true,
      collection:         @flavors,
      selected:           @instance.flavor_id,
      label_method:       -> (flavor) { "#{flavor.name}  (RAM: #{flavor.ram}MB, VCPUs: #{flavor.vcpus}, Disk: #{flavor.disk}GB)" }}

    = f.input :image_id, { label: "Image",
      as:                 :select,
      collection:         @images,
      selected:           @instance.image_id,
      required:           true,
      label_method:       -> (image) { "#{image.name}  (Size: #{byte_to_human(image.size)}, Format: #{image.disk_format})" }}

    = f.input :network_ids, { label: "Private Network",
      wrapper_html:       { class: ('has-error' if @private_networks.empty?) },
      input_html:         {name: "#{@instance.model_name.param_key}[network_ids][][id]" },
      as:                 :select,
      collection:         @private_networks,
      selected:           (@instance.network_ids || []).collect{|n| n[:id]},
      required:           true,
      label_method:       -> (network) { "#{network.name}  (#{network.subnet_objects.map(&:cidr).join(', ')})" }}

    = f.input :user_data, { label: "User data",
      as:                 :text,
      required:           false}


  %div.buttons{class: modal? ? 'modal-footer' : ''}
    - if modal?
      %button.btn.btn-default{type:"button", data: {dismiss:"modal"}, aria: {label: "Cancel"}} Cancel
    - else
      = link_to "Cancel", instances_url(), class: 'btn btn-default'
    = button_tag "Create", { class: 'btn btn-primary pull-right', data: { disable_with: "Please wait..." } }
