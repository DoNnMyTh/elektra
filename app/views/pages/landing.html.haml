= content_for :page_lead do
  .jumbotron.jumbotron-fancy
    .container
      .row
        .col-sm-8
          %h1 SAP Converged Cloud
          %p From Playground to Production on one Infrastructure-as-a-Service (IaaS), powered by OpenStack, SAP HANA and Monsoon Automation
          = link_to "Enter the cloud", plugin('identity').domain_path(project_id:nil), class: "btn btn-outline-negative btn-lg"
        .col-sm-4
          %span.moo-cloud-white
          -# .row
          -#   .col-sm-6.hero-info
          -#     .info-stat
          -#       21.164
          -#     .info-stat-text
          -#       virtual machines
          -#   .col-sm-6.hero-info
          -#     .info-stat
          -#       3,7 PB
          -#     .info-stat-text
          -#       storage
          -#
          -# .row
          -#   .col-sm-6.hero-info
          -#     .info-stat
          -#       13
          -#     .info-stat-text
          -#       regions
          -#   .col-sm-6.hero-info
          -#     .info-stat
          -#       73
          -#     .info-stat-text
          -#       networks


%h1.page-header Converged Cloud Is Available In These Regions

#worldmap

%h1.page-header Our Services


%ul.fancy-list.fancy-list-2col
  %li
    .fancy-icon
      %span.moo-cloud
    %h5.fancy-header Compute & Block Storage
    %ul.content-list
      %li Create virtual machines with up to 256 GB RAM
      %li Snapshot running vms and create images on VMWare or KVM.
      %li Create volumes, attach them to vms and take snapshots.

  %li
    .fancy-icon
      %span.fa.fa-sitemap.fa-fw
    %h5.fancy-header Networking & Load Balancing
    %ul.content-list
      %li Manage networks, routers, floating IPs and security groups
      %li Apply load balancing services (LBaaS)
      %li Implement blue-green deployment strategies
      %li Configure access from Intranet, Internet or via VPN

  %li
    .fancy-icon
      %span.fa.fa-database.fa-fw
    %h5.fancy-header Additional Storage Types & Software Repositories
    %ul.content-list
      %li Use Low-cost shared object storage or NFS file system storage as service.
      %li Setup repositories for linux packages, chef cookbooks and docker images
      %li Consume Windows update services.
      %li Replicate your repos into the regions where you need them.

  %li
    .fancy-icon
      %span.fa.fa-lock.fa-fw
    %h5.fancy-header Access Management & Auditing
    %ul.content-list
      %li Manage authorizations
      %li Delegate administrative rights to central operator.
      %li Configure Cloud Access Manager (CAM).
      %li Keep an audit trail for your project services.

  %li
    .fancy-icon
      %span.fa.fa-gears.fa-fw
    %h5.fancy-header Monsoon Automation (IaC)
    %ul.content-list
      %li Execute ad-hoc jobs using scripts, Chef and Ansible.
      %li Execute defined run-lists, also based on infrastructure events.
      %li Be compliant applying default "base runlist".
      %li Install the open source IaC service into any other OpenStack.

  %li
    .fancy-icon
      %span.fa.fa-code.fa-fw
    %h5.fancy-header API Access & Tested Tool Belt
    %ul.content-list
      %li Your choice of OpenStack, AWS or GMP/TIC API
      %li Download the tested SDKs for your preferred language
      %li Consume the supported API documentation.
      %li Use CF Bosh, Packer, kubernetes, terraform and other tested tools.


  %li
    .fancy-icon
      %span.fa.fa-cubes.fa-fw
    %h5.fancy-header Orchestration & Containerization
    %ul.content-list
      %li Create complex landscapes using yml or json and combine with IaC
      %li Consume pre-configured software stacks.
      %li Run your cloud native app using container-as-a-service

  %li
    .fancy-icon
      %span.fa.fa-area-chart.fa-fw
    %h5.fancy-header  Monitoring, Logging, Cost & Capacity Control
    %ul.content-list
      %li Understand quotas, monitor consumption & cost.
      %li Consume metrics and configure your own metrics and alarms.
      %li Forward logs to make them accessible to your operator's dashboard.

  %li
    .fancy-icon
      %span.fa.fa-hdd-o.fa-fw
    %h5.fancy-header Bare Metal Data Processing & HANA
    %ul.content-list
      %li Setup HANA databases on bare metal using HANA cloud cells.
      %li Create bare metal instances or bring your own hardware and connect it to your project.


  %li
    .fancy-icon
      %span.fa.fa-globe.fa-fw
    %h5.fancy-header Global distribution
    %ul.content-list
      %li Choose the region where you want to deploy your VMs: Europe, Russia, US-East, US-West, Canada, Brazil, Japan, China, Australia

  %li
    .fancy-icon
      %span.fa.fa-map-signs.fa-fw
    %h5.fancy-header DNS
    %ul.content-list
      %li Manage your own domains
      %li Allow your customers to bring their own domain.

  %li
    .fancy-icon
      %span.fa.fa-archive.fa-fw
    %h5.fancy-header OS Images
    %ul.content-list
      %li Choose from CoreOS, Debian, RHEL, SAP Suse, Suse, Ubuntu or Windows flavors.



:javascript
  //Map dimensions (in pixels)
  var width = 1140,
      height = 690;

  //Map projection
  var projection = d3.geo.miller()
      .scale(174.38214717143913)
      .center([-0.0018057527730042117,11.25867847275954]) //projection center
      .translate([width/2,height/2]) //translate to center the map in view

  //Generate paths based on projection
  var path = d3.geo.path()
      .projection(projection);

  //Create an SVG
  var svg = d3.select("#worldmap").append("svg")
      .attr("width", width)
      .attr("height", height);

  var tip = d3.tip()
      .attr('class', 'd3-tip')
      .offset([-10, 0])
      .html(function(d) {
        var selectedRegionText = "";
        if (d.regionkey == "#{current_region}") {
          selectedRegionText = "Active Region";
        }

        return "<strong>Region:</strong> " + d.regionname + "<br />"
               + "<span class='d3-tip-info'>" + d.city + ", " + d.country + "</span><br />"
               + "<span class='d3-tip-active'>" + selectedRegionText + "</span>";
      })

  // add tooltip
  svg.call(tip);

  // shorthand
  var g = svg.append("g");

  //Group for the map features
  var features = g
      .attr("class","features");

  // Get correct regions config file (depending on landscape)
  var regions_config = "/regions_#{ENV['LANDSCAPE'] || 'development' }.json"

  d3.json("/world_countries.topojson", function(error,geodata) {
    if (error) return console.log(error); //unknown error, check the console

    //Create a path for each map feature in the data
    features.selectAll("path")
      .data(topojson.feature(geodata,geodata.objects.subunits).features) //generate features from TopoJSON
      .enter()
      .append("path")
      .attr("d",path);

    // Render circles for cities
    d3.json(regions_config, function(error, data) {
        g.selectAll("circle")
          .data(data)
          .enter()
          .append("circle")
          .attr("cx", function(d) {
                return projection([d.lon, d.lat])[0];
          })
          .attr("cy", function(d) {
                return projection([d.lon, d.lat])[1];
          })
          .attr("r", 7)
          .classed({'worldmap-city': true, 'active': function(d) {return d.regionkey == "#{current_region}"}})
          .on("click",clickedCity)
          .on("mouseover", mouseoverCity)
          .on("mouseout", mouseoutCity);
     });

  });

  // Add optional onClick events for features here
  // d.properties contains the attributes (e.g. d.properties.name, d.properties.population)
  function clickedCity(d,i) {
    window.location.assign(window.location.href.replace("#{current_region}", d.regionkey));
  }

  // Add optional onMouseover events for features here
  // d.properties contains the attributes (e.g. d.properties.name, d.properties.population)
  function mouseoutCity(d,i) {
    d3.select(this).attr("r", 7);
    tip.hide(d);
  }

  // Add optional onMouseover events for features here
  // d.properties contains the attributes (e.g. d.properties.name, d.properties.population)
  function mouseoverCity(d,i) {
    d3.select(this).attr("r", 10);
    tip.show(d);
  }
