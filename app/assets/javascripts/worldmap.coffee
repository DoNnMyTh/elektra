#Map dimensions (in pixels)
width = 1140
height = 690
#Map projection
projection = d3.geo.miller().scale(174.38214717143913).center([
  -0.0018057527730042117
  11.25867847275954
]).translate([
  width / 2
  height / 2
])
#translate to center the map in view
#Generate paths based on projection
path = d3.geo.path().projection(projection)
#Create an SVG
svg = d3.select('#worldmap').append('svg').attr('width', width).attr('height', height)
tip = d3.tip().attr('class', 'd3-tip').offset([
  -10
  0
]).html((d) ->
  selectedRegionText = ''
  if d.regionkey == '#{current_region}'
    selectedRegionText = 'Active Region'
  '<strong>Region:</strong> ' + d.regionname + '<br />' + '<span class=\'d3-tip-info\'>' + d.city + ', ' + d.country + '</span><br />' + '<span class=\'d3-tip-active\'>' + selectedRegionText + '</span>'
)
# add tooltip
# Add optional onClick events for features here
# d.properties contains the attributes (e.g. d.properties.name, d.properties.population)

clickedCity = (d, i) ->
  window.location.assign window.location.href.replace('#{current_region}', d.regionkey)
  return

# Add optional onMouseover events for features here
# d.properties contains the attributes (e.g. d.properties.name, d.properties.population)

mouseoutCity = (d, i) ->
  d3.select(this).attr 'r', 7
  tip.hide d
  return

# Add optional onMouseover events for features here
# d.properties contains the attributes (e.g. d.properties.name, d.properties.population)

mouseoverCity = (d, i) ->
  d3.select(this).attr 'r', 10
  tip.show d
  return

svg.call tip
# shorthand
g = svg.append('g')
#Group for the map features
features = g.attr('class', 'features')
# Get correct regions config file (depending on landscape)
regions_config = '/regions_#{ENV[\'LANDSCAPE\'] || \'development\' }.json'
d3.json '/world_countries.topojson', (error, geodata) ->
  if error
    return console.log(error)
  #unknown error, check the console
  #Create a path for each map feature in the data
  features.selectAll('path').data(topojson.feature(geodata, geodata.objects.subunits).features).enter().append('path').attr 'd', path
  # Render circles for cities
  d3.json regions_config, (error, data) ->
    g.selectAll('circle').data(data).enter().append('circle').attr('cx', (d) ->
      projection([
        d.lon
        d.lat
      ])[0]
    ).attr('cy', (d) ->
      projection([
        d.lon
        d.lat
      ])[1]
    ).attr('r', 7).classed(
      'worldmap-city': true
      'active': (d) ->
        d.regionkey == '#{current_region}'
    ).on('click', clickedCity).on('mouseover', mouseoverCity).on 'mouseout', mouseoutCity
    return
  return

# ---
# generated by js2coffee 2.2.0
